{% set version = "0.6.0.5" %}
{% set soversion = ".".join(version.split(".")[:3]) %}
{% set somajor = version.split(".")[0] %}

package:
  name: libcudss-split
  version: {{ version }}

{% set arm_variant_type = arm_variant_type | default("sbsa") %}
{% set cuda_compiler_version = cuda_compiler_version | default("None") %}

source:
  - url: "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/linux-x86_64/libcudss-linux-x86_64-{{ version }}_cuda12-archive.tar.xz"  # [linux and x86_64 and (cuda_compiler_version or "").startswith("12")]
    sha256: "159ce1d4e3e4bba13b0bd15cf943e44b869c53b7a94f9bac980768c927f02e75"  # [linux and x86_64 and (cuda_compiler_version or "").startswith("12")]
  - url: "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/linux-sbsa/libcudss-linux-sbsa-{{ version }}_cuda12-archive.tar.xz"  # [linux and aarch64 and (cuda_compiler_version or "").startswith("12") and arm_variant_type == "sbsa"]
    sha256: "b56cd0841c543bb81b2665063967f56cf3a3a22a445ddf1642c7f765f2059b42"  # [linux and aarch64 and (cuda_compiler_version or "").startswith("12") and arm_variant_type == "sbsa"]
  - url: "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/windows-x86_64/libcudss-windows-x86_64-{{ version }}_cuda12-archive.zip"  # [win and x86_64 and (cuda_compiler_version or "").startswith("12")]
    sha256: "45319317d9f67fecc9af7e5cf162cb46111f5d35b06871c147fa8f030d7cecc5"  # [win and x86_64 and (cuda_compiler_version or "").startswith("12")]
  - url: "https://developer.download.nvidia.com/compute/cudss/redist/libcudss/linux-aarch64/libcudss-linux-aarch64-{{ version }}_cuda12-archive.tar.xz"  # [linux and aarch64 and (cuda_compiler_version or "").startswith("12") and arm_variant_type == "tegra"]
    sha256: "e6f5d5122d735f9dbfd42c9eaba067a557a5613ee4a6001806935de11aff4b09"  # [linux and aarch64 and (cuda_compiler_version or "").startswith("12") and arm_variant_type == "tegra"]

build:
  number: 0
  skip: true  # [(cuda_compiler_version in (None, "None", "11.8")) or (not (linux64 or aarch64 or win64))]
  script:   # [win]
    - xcopy include %LIBRARY_INC% /E /I /Y /V  # [win]
    - xcopy lib %LIBRARY_LIB% /E /I /Y /V  # [win]
    - xcopy bin %LIBRARY_BIN% /E /I /Y /V  # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cuda') }}
    - {{ compiler('cxx') }}
    - {{ stdlib("c") }}
    - arm-variant * {{ arm_variant_type }}  # [aarch64]
    - cf-nvidia-tools 1  # [linux]

outputs:

  - name: libcudss
    build:
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
        - libcublas-dev
    files:
      - lib/libcudss.so.*                      # [linux]
      - lib/libcudss_mtlayer_*.so.*            # [linux]
      - Library/bin/cudss64_{{ somajor }}.dll  # [win]
      - Library/bin/cudss_mtlayer_*.dll        # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cuda') }}
        - {{ compiler('cxx') }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ stdlib("c") }}
        - libgomp
      host:
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
        - libcublas-dev
        - {{ pin_subpackage("libcudss-commlayer-nccl", exact=True) }}  # [linux]
        - {{ pin_subpackage("libcudss-commlayer-mpi", exact=True) }}  # [linux]
      run:
        - {{ pin_compatible('cuda-version', max_pin='x', min_pin='x') }}  # [cuda_compiler_version != "None"]
        - libcublas
      run_constrained:
        - libcudss0 <0.0.0a0
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ pin_subpackage("libcudss-commlayer-nccl", exact=True) }}
        - {{ pin_subpackage("libcudss-commlayer-mpi", exact=True) }}
    test:
      requires:
        - libcudss-commlayer-nccl  # [linux]
        - libcudss-commlayer-mpi  # [linux]
      commands:
        - test -f $PREFIX/lib/libcudss.so.{{ soversion }}                # [linux]
        - test -L $PREFIX/lib/libcudss.so.{{ somajor }}                  # [linux]
        - test -f $PREFIX/lib/libcudss_mtlayer_gomp.so.{{ soversion }}   # [linux]
        - test -L $PREFIX/lib/libcudss_mtlayer_gomp.so.{{ somajor }}     # [linux]
        - test ! -f $PREFIX/lib/libcudss_static.a                        # [linux]
        - if not exist %LIBRARY_BIN%\\cudss64_{{ somajor }}.dll exit 1   # [win]
        - if not exist %LIBRARY_BIN%\\cudss_mtlayer_vcomp140.dll exit 1  # [win]
    about:
      summary: The NVIDIA cuDSS runtime library (with a pre-built threading layer for OpenMP).
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      description: >-
        This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.

  - name: libcudss-dev
    build:
      run_exports:
        # Breaking changes every version until 1.0
        - {{ pin_subpackage("libcudss", max_pin="x.x.x") }}
    files:
      - lib/libcudss.so  # [linux]
      - include/cudss*  # [linux]
      - lib/cmake/cudss/cudss-config*  # [linux]
      - lib/cmake/cudss/cudss-targets*  # [linux]
      - Library/lib/cudss.lib  # [win]
      - Library/include/cudss*  # [win]
      - Library/lib/cmake/cudss/*  # [win]
    requirements:
      host:
        - {{ pin_subpackage("libcudss", exact=True) }}
      run:
        - {{ pin_subpackage("libcudss", exact=True) }}
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      files:
        - test
      requires:   # [build_platform == target_platform]
        - {{ compiler("c") }}  # [build_platform == target_platform]
        - {{ compiler("cxx") }}  # [build_platform == target_platform]
        - {{ compiler('cuda') }}  # [build_platform == target_platform]
        - {{ stdlib("c") }}  # [build_platform == target_platform]
        - cmake  # [build_platform == target_platform]
        - ninja  # [build_platform == target_platform]
      commands:
        - test -f $PREFIX/include/cudss.h  # [linux]
        - test -f $PREFIX/include/cudss_distributed_interface.h  # [linux]
        - test -f $PREFIX/include/cudss_threading_interface.h  # [linux]
        - test -L $PREFIX/lib/libcudss.so  # [linux]
        - test ! -f $PREFIX/lib/libcudss_static.a  # [linux]
        - test ! -f $PREFIX/lib/cmake/cudss/cudss-static.targets.cmake  # [linux]
        - if not exist %LIBRARY_LIB%\\cudss.lib exit 1  # [win]
        - if not exist %LIBRARY_INC%\\cudss.h exit 1  # [win]
        - if not exist %LIBRARY_INC%\\cudss_distributed_interface.h exit 1  # [win]
        - if not exist %LIBRARY_INC%\\cudss_threading_interface.h exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\cmake\\cudss\\cudss-config.cmake exit 1  # [win]
        - cmake ${CMAKE_ARGS} -GNinja test  # [build_platform == target_platform]
        - cmake --build .  # [build_platform == target_platform]
    # Metadata will be inherited from top-level

# loadable modules; optional and only needed at runtime

  - name: libcudss-commlayer-nccl
    build:
      skip: true  # [not linux]
    files:
      - lib/libcudss_commlayer_nccl.so.*  # [linux]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ stdlib("c") }}
      host:
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
        # collect channel pinnings
        - nccl
        # constrain to version that we actually built with
        - nccl 2.21.5
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      commands:
        - test -f $PREFIX/lib/libcudss_commlayer_nccl.so.{{ soversion }}  # [linux]
        - test -L $PREFIX/lib/libcudss_commlayer_nccl.so.{{ somajor }}  # [linux]
    about:
      summary: Install this package to enable NCCL for cuDSS
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      description: >-
        This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.

  - name: libcudss-commlayer-mpi
    build:
      skip: true  # [not linux]
    files:
      - lib/libcudss_commlayer_openmpi.so.*  # [linux]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ stdlib("c") }}
      host:
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
        # collect channel pinning
        - openmpi
        # constrain to version that we actually built with
        - openmpi >=4.1.0,<6
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      commands:
        - test -f $PREFIX/lib/libcudss_commlayer_openmpi.so.{{ soversion }}  # [linux]
        - test -L $PREFIX/lib/libcudss_commlayer_openmpi.so.{{ somajor }}  # [linux]
    about:
      summary: Install this package to enable MPI for cuDSS
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      description: >-
        This is a runtime package only. Developers should install libcudss-dev to build with cuDSS.

# NOTE: Metadata inheritance from this section to the outputs is all or nothing. Only the
# -dev package and the feedstock readme are inheriting this metadata.
about:
  home: https://developer.nvidia.com/cudss
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/cuda/cudss/license.html
  summary: The NVIDIA cuDSS development package.
  description: >-
    NVIDIA cuDSS is an optimized, first-generation GPU-accelerated Direct Sparse Solver library for solving linear systems with sparse matrices. Direct Sparse Solvers are an important part of numerical computing as they provide a general robust way of solving large linear systems without and are capable of taking advantage
    of both high compute throughput and memory bandwidth of the GPUs.
  doc_url: https://docs.nvidia.com/cuda/cudss/

extra:
  compute-subdir: cudss
  redist-json-name: libcudss
  recipe-maintainers:
    - conda-forge/cuda
    - kvoronin
  feedstock-name: libcudss
